---
- name: "Get environment_settings.py.dist file from remote repo"
  fetch:
    src: "{{ django_root }}/{{ django_mainapp }}/environment_settings.py.dist"
    dest: "/tmp/{{ ansible_nodename }}_environment_settings.py.dist"
    flat: yes
    fail_on_missing: yes
  tags:
    - "codedeploy"
    - "djangosettings"

- name: "Put environment_settings.py into place"
  template:
    src: "/tmp/{{ ansible_nodename }}_environment_settings.py.dist"
    dest: "{{ django_root }}/{{ django_mainapp }}/environment_settings.py"
  tags:
    - "djangosettings"
    - "codedeploy"
  notify:
    - "touch-chain-reload uwsgi"
    - "restart daphne using supervisorctl"

- name: "Delete temporary environment_settings.py.dist"
  file:
    path: "/tmp/{{ ansible_nodename }}_environment_settings.py.dist"
    state: absent
  tags:
    - "codedeploy"

- name: "Make sure manage.py is executable"
  file:
    path: "{{ django_root }}/manage.py"
    owner: "root"
    group: "wheel"
    mode: "0755"
  tags:
    - "codedeploy"

- name: "Run collectstatic"
  django_manage:
    command: "collectstatic"
    app_path: "{{ django_root }}"
    virtualenv: "{{ django_virtualenv_path }}"
  tags:
    - "codedeploy"

- name: "Create django media root directory"
  file:
    path: "{{ django_media_root }}"
    state: "directory"
    owner: "www"
    group: "www"
  tags:
    - "codedeploy"

- name: "Create django media root subdirectories as needed"
  file:
    path: "{{ django_media_root }}/{{ item }}"
    state: "directory"
    owner: "www"
    group: "www"
  with_items: "{{ django_media_root_subdirs | default([]) }}"
  tags:
    - "codedeploy"

- name: "Create PDF archive directory where needed"
  file:
    path: "{{ pdf_archive_path }}"
    state: "directory"
    owner: "www"
    group: "www"
  when: pdf_archive_path is defined
  tags:
    - "codedeploy"

- name: "Run compilemessages"
  django_manage:
    command: "compilemessages"
    app_path: "{{ django_root }}"
    virtualenv: "{{ django_virtualenv_path }}"
  tags:
    - "codedeploy"
  when: django_i18n | default(False)

- name: "Enable daily cronjob to cleanup django sessions"
  cron:
    name: "Cleanup django sessions daily"
    minute: "{{ 59 | random }}"
    hour: "{{ 23 | random }}"
    job: "{{ django_virtualenv_path }}/bin/python -u {{ django_root }}/manage.py clearsessions"
    cron_file: "/etc/crontab"
    user: "nobody"

